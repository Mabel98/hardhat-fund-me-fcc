{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// 1. Pragma\npragma solidity ^0.8.7;\n// 2. Imports\nimport \"./PriceConverter.sol\";\n// 3. Interfaces, Libraries, Contracts\nerror FundMe__NotOwner();\n\n/**@title A sample Funding Contract\n * @author Patrick Collins\n * @notice This contract is for creating a sample funding contract\n * @dev This implements price feeds as our library\n */\ncontract FundMe {\n    // Type Declarations\n    using PriceConverter for uint256;\n\n    // State variables\n    // use less gas by 'constant'\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\n\n    mapping(address => uint256) public s_addressMappingFoundAmount;\n\n    address[] public s_funders;\n\n    // init owner\n    // use less gas by 'immutable'\n    address public immutable i_owner;\n\n    AggregatorV3Interface private s_aggreagtor;\n\n    // Events (we have none!)\n\n    // Modifiers\n    modifier onlyOwner() {\n        // check sender.\n        //    require(msg.sender == i_owner, \"Only the owner could withdraw!\");\n        // or use\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\n        _; // This means check fistly, then execute next code.\n    }\n\n    /// Functions Order:\n    //// constructor\n    //// receive\n    //// fallback\n    //// external\n    //// public\n    //// internal\n    //// private\n    //// view / pure\n\n    constructor(address priceFeed) {\n        i_owner = msg.sender;\n        s_aggreagtor = AggregatorV3Interface(priceFeed);\n    }\n\n    /// @notice Funds our contract based on the ETH/USD price\n    function fundMe() public payable {\n        // Want to be able to set a minimum fund amount in USD.\n        // 1. How to send ETH to this contract? use payable\n        require(\n            msg.value.getConversionRate(s_aggreagtor) >= MINIMUM_USD,\n            \"Didn't send enough!\"\n        ); // 1e18 : 1*10**18\n        //\n        s_addressMappingFoundAmount[msg.sender] += msg.value;\n        s_funders.push(msg.sender);\n    }\n\n    // withdraw\n    function withdraw() public onlyOwner {\n        // reset mapping\n        for (uint i = 0; i < s_funders.length; i++) {\n            s_addressMappingFoundAmount[s_funders[i]] = 0;\n        }\n        // reset array\n        s_funders = new address[](0);\n        // transfer money\n        // // transfer\n        // payable(msg.sender).transfer(address(this).balance);\n        // // send\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\n        // require(sendSuccess, \"Send failed\");\n        // call\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Call failed\");\n    }\n\n    function cheaperWithdraw() public onlyOwner {\n        address[] memory funders = s_funders;\n        // mappings can't be in memory, sorry!\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex++\n        ) {\n            address funder = funders[funderIndex];\n            s_addressMappingFoundAmount[funder] = 0;\n        }\n        s_funders = new address[](0);\n        // payable(msg.sender).transfer(address(this).balance);\n        (bool success, ) = i_owner.call{value: address(this).balance}(\"\");\n        require(success);\n    }\n\n    receive() external payable {\n        fundMe();\n    }\n\n    fallback() external payable {\n        fundMe();\n    }\n\n    function getFunder(uint256 index) public view returns (address) {\n        return s_funders[index];\n    }\n\n    function getOwner() public view returns (address) {\n        return i_owner;\n    }\n\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\n        return s_aggreagtor;\n    }\n\n    /** @notice Gets the amount that an address has funded\n     *  @param fundingAddress the address of the funder\n     *  @return the amount funded\n     */\n    function getAddressToAmountFunded(\n        address fundingAddress\n    ) public view returns (uint256) {\n        return s_addressMappingFoundAmount[fundingAddress];\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getConversionRate(\n        uint _ethAmount,\n        AggregatorV3Interface aggregator\n    ) internal view returns (uint256) {\n        (, int256 answer, , , ) = aggregator.latestRoundData();\n        uint256 ethPriceInUSD = uint256(answer * 1e10);\n        return (ethPriceInUSD * _ethAmount) / 1e18;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}